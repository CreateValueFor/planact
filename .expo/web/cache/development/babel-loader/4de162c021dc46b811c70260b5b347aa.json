{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _jsxFileName = \"/Users/sooyoung/Projects/Planact/src/materials/Button.tsx\";\nvar _excluded = [\"color\"];\n\nvar Button = function Button(props) {\n  var theme = (0, _reactRedux.useSelector)(function (_ref) {\n    var theme = _ref.theme;\n    return theme;\n  });\n\n  var _styles = styles(theme, props),\n      container = _styles.container,\n      content = _styles.content;\n\n  var color = props.color,\n      others = (0, _objectWithoutProperties2.default)(props, _excluded);\n  return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({\n    style: container\n  }, others, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, props.content));\n};\n\nvar styles = function styles(theme, _ref2) {\n  var color = _ref2.color,\n      disabled = _ref2.disabled;\n\n  var _ref3 = color ? theme[color] : theme.primary,\n      main = _ref3.main,\n      text = _ref3.text,\n      border = _ref3.border;\n\n  return _reactNative.StyleSheet.create({\n    container: {\n      backgroundColor: main,\n      borderColor: border,\n      opacity: disabled ? 0.6 : 1,\n      borderWidth: .5,\n      borderRadius: 5,\n      padding: 10\n    },\n    content: {\n      fontSize: 20,\n      color: text\n    }\n  });\n};\n\nvar _default = Button;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sooyoung/Projects/Planact/src/materials/Button.tsx"],"names":["Button","props","theme","styles","container","content","color","others","disabled","primary","main","text","border","StyleSheet","create","backgroundColor","borderColor","opacity","borderWidth","borderRadius","padding","fontSize"],"mappings":";;;;;;;;;;;AAGA;;AACA;;AACA;;;;;AAOA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAASC,KAAT,EAA2B;AACtC,MAAMC,KAAK,GAAG,6BAAY;AAAA,QAAEA,KAAF,QAAEA,KAAF;AAAA,WAAsBA,KAAtB;AAAA,GAAZ,CAAd;;AACA,gBAA6BC,MAAM,CAACD,KAAD,EAAQD,KAAR,CAAnC;AAAA,MAAOG,SAAP,WAAOA,SAAP;AAAA,MAAkBC,OAAlB,WAAkBA,OAAlB;;AACA,MAAOC,KAAP,GAA2BL,KAA3B,CAAOK,KAAP;AAAA,MAAiBC,MAAjB,0CAA2BN,KAA3B;AACF,SACE,6BAAC,6BAAD;AAAkB,IAAA,KAAK,EAAEG;AAAzB,KAAwCG,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEF,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,CAACI,OADT,CADF,CADF;AAOD,CAXD;;AAiBA,IAAMF,MAAM,GAAG,SAATA,MAAS,CAACD,KAAD,SAA4D;AAAA,MAAtCI,KAAsC,SAAtCA,KAAsC;AAAA,MAA/BE,QAA+B,SAA/BA,QAA+B;;AACvE,cAA6BF,KAAK,GAAGJ,KAAK,CAACI,KAAD,CAAR,GAAkBJ,KAAK,CAACO,OAA1D;AAAA,MAAOC,IAAP,SAAOA,IAAP;AAAA,MAAaC,IAAb,SAAaA,IAAb;AAAA,MAAmBC,MAAnB,SAAmBA,MAAnB;;AACA,SAAOC,wBAAWC,MAAX,CAAkB;AACrBV,IAAAA,SAAS,EAAE;AACPW,MAAAA,eAAe,EAAEL,IADV;AAEPM,MAAAA,WAAW,EAAEJ,MAFN;AAGPK,MAAAA,OAAO,EAAET,QAAQ,GAAG,GAAH,GAAS,CAHnB;AAIPU,MAAAA,WAAW,EAAE,EAJN;AAKPC,MAAAA,YAAY,EAAE,CALP;AAMPC,MAAAA,OAAO,EAAE;AANF,KADU;AASrBf,IAAAA,OAAO,EAAC;AACJgB,MAAAA,QAAQ,EAAE,EADN;AAEJf,MAAAA,KAAK,EAAEK;AAFH;AATa,GAAlB,CAAP;AAeH,CAjBD;;eAkBeX,M","sourcesContent":["\nimport { AppState } from '@/../App';\nimport { DefaultTheme } from '@/style/styled';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity, TouchableOpacityProps, Text } from 'react-native'\nimport { useSelector } from 'react-redux';\n\ninterface ButtonProps extends TouchableOpacityProps{\n    color?: \"primary\" | \"secondary\" | \"ghost\"\n    content: string\n}\n\nconst Button = function(props:ButtonProps){\n    const theme = useSelector(({theme}:AppState) => theme);\n    const {container, content} = styles(theme, props);\n    const {color, ...others} = props;\n  return(\n    <TouchableOpacity style={container} {...others}>\n      <Text style={content}>\n        {props.content}\n      </Text>\n    </TouchableOpacity>\n  )\n}\n\ninterface ButtonStyleProps {\n    color?: \"primary\" | \"secondary\" | \"ghost\"\n    disabled?: boolean\n}\nconst styles = (theme:DefaultTheme, {color, disabled}:ButtonStyleProps) => {\n    const {main, text, border} = color ? theme[color] : theme.primary;\n    return StyleSheet.create({\n        container: {\n            backgroundColor: main,\n            borderColor: border,\n            opacity: disabled ? 0.6 : 1,\n            borderWidth: .5,\n            borderRadius: 5,\n            padding: 10,\n        },\n        content:{\n            fontSize: 20,\n            color: text\n        },\n\n    })\n}\nexport default Button;\n"]},"metadata":{},"sourceType":"script"}