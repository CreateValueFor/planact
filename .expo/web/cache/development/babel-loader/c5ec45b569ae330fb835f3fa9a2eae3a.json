{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _TouchableView = require(\"../../components/TouchableView\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\rjqnr\\\\src\\\\planact_test\\\\src\\\\screens\\\\market\\\\Program.tsx\";\n\nfunction Program(_ref) {\n  var _this = this;\n\n  var data = _ref.data,\n      isLoading = _ref.isLoading;\n\n  var renderPrograms = function renderPrograms(_ref2) {\n    var item = _ref2.item;\n    if (isLoading) return _react.default.createElement(_reactNative.Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 27\n      }\n    }, \"loading...\");\n\n    var onPress = function onPress() {\n      console.log('pressed');\n    };\n\n    return _react.default.createElement(_TouchableView.TouchableView, {\n      onPress: onPress,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, _react.default.createElement(_reactNative.Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }, item.program_name), _react.default.createElement(_reactNative.Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, item.description), _react.default.createElement(_reactNative.Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, item.price));\n  };\n\n  return _react.default.createElement(_reactNative.FlatList, {\n    data: data,\n    renderItem: renderPrograms,\n    keyExtractor: function keyExtractor(item) {\n      return item.program_id;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  });\n}\n\nvar _default = Program;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/rjqnr/src/planact_test/src/screens/market/Program.tsx"],"names":["Program","data","isLoading","renderPrograms","item","onPress","console","log","program_name","description","price","program_id"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;AAQA,SAASA,OAAT,OAAoD;AAAA;;AAAA,MAAjCC,IAAiC,QAAjCA,IAAiC;AAAA,MAA3BC,SAA2B,QAA3BA,SAA2B;;AAClD,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,QAAc;AAAA,QAAXC,IAAW,SAAXA,IAAW;AACnC,QAAIF,SAAJ,EAAe,OAAO,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;;AACf,QAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAFD;;AAGA,WACE,6BAAC,4BAAD;AAAe,MAAA,OAAO,EAAEF,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,IAAI,CAACI,YAAZ,CADF,EAEE,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOJ,IAAI,CAACK,WAAZ,CAFF,EAGE,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOL,IAAI,CAACM,KAAZ,CAHF,CADF;AAOD,GAZD;;AAaA,SACE,6BAAC,qBAAD;AACE,IAAA,IAAI,EAAET,IADR;AAEE,IAAA,UAAU,EAAEE,cAFd;AAGE,IAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,aAAUA,IAAI,CAACO,UAAf;AAAA,KAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD;;eAEcX,O","sourcesContent":["import { TouchableView } from '@/components/TouchableView'\r\nimport { IProgram } from '@/utils/data'\r\nimport React from 'react'\r\nimport { Text } from 'react-native'\r\nimport { FlatList, View } from 'react-native'\r\n\r\ninterface ProgramProps {\r\n  data: IProgram[]\r\n  isLoading: Boolean\r\n}\r\n\r\nfunction Program({ data, isLoading }: ProgramProps) {\r\n  const renderPrograms = ({ item }) => {\r\n    if (isLoading) return <Text>loading...</Text>\r\n    const onPress = () => {\r\n      console.log('pressed')\r\n    }\r\n    return (\r\n      <TouchableView onPress={onPress}>\r\n        <Text>{item.program_name}</Text>\r\n        <Text>{item.description}</Text>\r\n        <Text>{item.price}</Text>\r\n      </TouchableView>\r\n    )\r\n  }\r\n  return (\r\n    <FlatList\r\n      data={data}\r\n      renderItem={renderPrograms}\r\n      keyExtractor={(item) => item.program_id}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Program\r\n"]},"metadata":{},"sourceType":"script"}