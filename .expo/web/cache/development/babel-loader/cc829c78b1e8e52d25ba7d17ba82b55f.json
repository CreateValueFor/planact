{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectDestructuringEmpty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectDestructuringEmpty\"));\n\nvar _date = require(\"../utils/date\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _EventView = _interopRequireDefault(require(\"./EventView\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _jsxFileName = \"/Users/sooyoung/Projects/Planact/src/components/Daily.tsx\";\n\nfunction Daily(_ref) {\n  (0, _objectDestructuringEmpty2.default)(_ref);\n  var date = daily_dummy.date,\n      events = daily_dummy.events;\n  var theme = (0, _reactRedux.useSelector)(function (_ref2) {\n    var theme = _ref2.theme;\n    return theme;\n  });\n  var daytype = (0, _date.getDayType)(date);\n\n  var _styles = styles(theme, {\n    daytype: daytype\n  }),\n      container = _styles.container,\n      datetext = _styles.datetext;\n\n  return _react.default.createElement(_reactNative.TouchableOpacity, {\n    style: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: datetext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, date.getDate()), _react.default.createElement(_EventView.default, (0, _extends2.default)({}, events[0], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  })));\n}\n\nvar styles = function styles(theme, _ref3) {\n  var daytype = _ref3.daytype;\n  var mode_name = theme.mode_name,\n      text = theme.text;\n  var isLight = Boolean(mode_name.match(\"light\"));\n  return _reactNative.StyleSheet.create({\n    container: {\n      width: 120,\n      height: 120,\n      padding: 5,\n      paddingTop: 3,\n      borderRadius: 15,\n      borderWidth: .2,\n      shadowColor: \"#000000\",\n      shadowOpacity: 0.8,\n      shadowRadius: 2,\n      elevation: 1\n    },\n    datetext: {\n      color: daytype === 0 ? text : daytype === 1 ? 'blue' : 'red',\n      fontWeight: '800',\n      fontSize: 20\n    }\n  });\n};\n\nvar daily_dummy = {\n  date: new Date(),\n  events: [{\n    dateof: 1,\n    title: \"런닝머신 30분\",\n    content: \"9km/h 5분 12km/h 5분 반복\",\n    icon: \"running\",\n    date: new Date(),\n    completed: false,\n    color: \"#9c4646\"\n  }, {\n    dateof: 1,\n    title: \"영단어 100개 암기\",\n    content: \"Toeic 영단어\",\n    icon: \"study\",\n    date: new Date(),\n    completed: false,\n    color: \"#bbbbff\"\n  }]\n};\nvar _default = Daily;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sooyoung/Projects/Planact/src/components/Daily.tsx"],"names":["Daily","date","daily_dummy","events","theme","daytype","styles","container","datetext","getDate","mode_name","text","isLight","Boolean","match","StyleSheet","create","width","height","padding","paddingTop","borderRadius","borderWidth","shadowColor","shadowOpacity","shadowRadius","elevation","color","fontWeight","fontSize","Date","dateof","title","content","icon","completed"],"mappings":"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","sourcesContent":["import { DailyProps, daytype, User_Event } from '@/utils/data';\nimport { getDayType } from '@/utils/date';\nimport React from 'react';\nimport EventView from './EventView';\nimport { StyleSheet, TouchableOpacity, TouchableOpacityProps, Text } from 'react-native'\nimport { AppState } from '@/../App';\nimport { useSelector } from 'react-redux';\nimport { DefaultTheme } from '@/style/styled';\n\nfunction Daily ({}) {\n    //Dummy Variable\n    const {date, events}:DailyProps = daily_dummy;\n\n    const theme = useSelector(({theme}:AppState) => theme);\n    const daytype:daytype = getDayType(date);\n    const {container, datetext} = styles(theme, {daytype});\n    \n    return (\n        <TouchableOpacity style={container}>\n            <Text style={datetext}>\n                {date.getDate()}\n            </Text>\n            <EventView {...events[0]} />\n        </TouchableOpacity>\n    )\n}\n\ninterface DailyStyleProps {\n    daytype: daytype\n}\n\nconst styles = (theme:DefaultTheme, {daytype}:DailyStyleProps) => {\n    const {mode_name, text} = theme;\n    const isLight = Boolean(mode_name.match(\"light\"));\n    return StyleSheet.create({\n        container: {\n            width: 120,\n            height: 120,\n            padding: 5,\n            paddingTop: 3,\n            borderRadius: 15,\n            borderWidth: .2,\n            shadowColor: \"#000000\",\n            shadowOpacity: 0.8,\n            shadowRadius: 2,\n            elevation: 1,\n        },\n        datetext: {\n            color: daytype === 0 ? text : daytype === 1 ?'blue' : 'red',\n            fontWeight: '800',\n            fontSize: 20\n        }\n    })\n}\n\nconst daily_dummy:DailyProps = {\n    date: new Date(),\n    events:[\n    {\n        dateof: 1,\n        title: \"런닝머신 30분\",\n        content: \"9km/h 5분 12km/h 5분 반복\",\n        icon: \"running\",\n        date: new Date(),\n        completed: false,\n        color: \"#9c4646\"\n    },\n    {\n        dateof: 1,\n        title: \"영단어 100개 암기\",\n        content: \"Toeic 영단어\",\n        icon: \"study\",\n        date: new Date(),\n        completed: false,\n        color: \"#bbbbff\"\n    },\n    ]\n}\n\nexport default Daily;"]},"metadata":{},"sourceType":"script"}